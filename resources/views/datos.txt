<?php

namespace App\Http\Livewire;

use App\Models\ApplicationCall;
use App\Models\ApplicationDetail;
use App\Models\ReceivingEntity;
use App\Models\UserData;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Support\Collection;

class PostsModal extends GlobalModal
{
    use AuthorizesRequests;

    public Collection $entities;
    public Collection $calls;
    public array $selectedStudents = [];
    public Collection $students;
    public int $maxStudents = 0;
    public int $alreadyAssigned = 0;
    public $selectedCall = null;
    public $selectedEntity = null;
    public bool $selectAll = false;

    public function mount($entityID = null)
    {
        $this->entityID = $entityID;
        $this->calls = ApplicationCall::byUserCareer(auth()->user())->get();
        $this->entities = ReceivingEntity::byEntityCareer(auth()->user())->get();
        $this->students = collect();
        $this->calculateAvailableSlots();
    }

    public function modelClass(): string
    {
        return ApplicationDetail::class;
    }

    public function rules()
    {
        return [
            'selectedCall' => 'required|exists:application_calls,id',
            'selectedEntity' => 'required|exists:receiving_entities,id',
            'selectedStudents' => [
                'required',
                'array',
                'min:1', // Asegura que haya al menos 1 elemento
                function ($attribute, $value, $fail) {
                    if (empty($value)) {
                        $fail('Debe seleccionar al menos un estudiante.');
                        return;
                    }

                    $total = count($value);
                    if ($total > $this->maxStudents) {
                        $remaining = $this->maxStudents - $this->alreadyAssigned;
                        $fail("La entidad solo tiene {$remaining} cupo(s) disponibles de {$this->maxStudents}.");
                    }
                }
            ],
            'selectedStudents.*' => 'exists:user_data,id'
        ];
    }

    public function updatedSelectedEntity($entityId)
    {
        if ($entityId) {
            $this->loadStudentsForEntity($entityId);
            $this->calculateAvailableSlots();
        }
    }

    public function updatedSelectedCall()
    {
        if ($this->selectedEntity) {
            $this->calculateAvailableSlots();
        }
    }

    public function updatedSelectedStudents()
    {
        $this->selectAll = count($this->selectedStudents) >= min($this->maxStudents, $this->students->count());
        $this->calculateAvailableSlots();
    }

    protected function loadStudentsForEntity($entityId)
    {
        $this->calculateAvailableSlots();

        $entity = ReceivingEntity::with('careers')->find($entityId);
        $this->maxStudents = $entity->user_limit;

        $careerIds = $entity->careers->pluck('id');

        // Obtener solo los IDs de estudiantes YA asignados a ESTA entidad en este periodo
        $this->selectedStudents = ApplicationDetail::where('receiving_entity_id', $entityId)
            ->when($this->selectedCall, fn($q) => $q->where('application_calls_id', $this->selectedCall))
            ->pluck('user_data_id')
            ->toArray();

        // Obtener estudiantes disponibles (no asignados a NINGUNA entidad en este periodo)
        $query = UserData::with(['profiles', 'careers', 'semesters', 'grades'])
            ->whereIn('career_id', $careerIds)
            ->whereDoesntHave('applicationDetail', function ($q) {
                $q->when($this->selectedCall, fn($q) => $q->where('application_calls_id', $this->selectedCall));
            });

        if (!auth()->user()->hasRole('admin')) {
            $careerId = auth()->user()->teacherProfile->career_id;
            $query->where('career_id', $careerId);
        }

        $this->students = $query->get();
    }

    protected function calculateAvailableSlots()
    {
        if (!$this->selectedEntity) {
            $this->availableSlots = 0;
            $this->maxStudents = 0;
            return;
        }

        $entity = ReceivingEntity::find($this->selectedEntity);
        $this->maxStudents = $entity->user_limit ?? 0;

        $assigned = ApplicationDetail::where('receiving_entity_id', $this->selectedEntity)
            ->when($this->selectedCall, fn($q) => $q->where('application_calls_id', $this->selectedCall))
            ->whereIn('user_data_id', $this->selectedStudents)
            ->count();

        $this->availableSlots = $this->maxStudents - $assigned;
        return $this->availableSlots;
    }

    public function toggleStudentSelection($studentId)
    {
        if (in_array($studentId, $this->selectedStudents)) {
            $this->selectedStudents = array_filter($this->selectedStudents, fn($id) => $id != $studentId);
        } else {
            $total = $this->alreadyAssigned + count($this->selectedStudents);
            if ($total < $this->maxStudents) {
                $this->selectedStudents[] = $studentId;
            }
        }

        $this->calculateAvailableSlots();
    }

    public function save()
    {
        $this->calculateAvailableSlots();
        $this->validate();

        // Obtener asignaciones actuales
        $existingAssignments = $this->getExistingAssignments();

        // Identificar cambios
        $toAdd = array_diff($this->selectedStudents, $existingAssignments);
        $toRemove = array_diff($existingAssignments, $this->selectedStudents);

        // Eliminar deseleccionados
        if (!empty($toRemove)) {
            ApplicationDetail::where('receiving_entity_id', $this->selectedEntity)
                ->where('application_calls_id', $this->selectedCall)
                ->whereIn('user_data_id', $toRemove)
                ->delete();
        }

        // Agregar nuevos
        foreach ($toAdd as $studentId) {
            ApplicationDetail::create([
                'user_data_id' => $studentId,
                'application_calls_id' => $this->selectedCall,
                'receiving_entity_id' => $this->selectedEntity,
                'status_individual' => 'En Progreso',
                'assigned_by' => auth()->id()
            ]);
        }

        $this->closeModal();
        $this->redirectAfterSave();
    }

    public function authorizeAction($action, $model = null)
    {
        $this->authorize($action, $model ?? ApplicationDetail::class);
    }

    protected function getExistingAssignments()
    {
        if (!$this->selectedEntity || !$this->selectedCall) {
            return [];
        }

        return ApplicationDetail::where('receiving_entity_id', $this->selectedEntity)
            ->where('application_calls_id', $this->selectedCall)
            ->pluck('user_data_id')
            ->toArray();
    }

    public function getShouldDisableSaveButtonProperty()
    {
        // Verificar selecci칩n b치sica
        if (!$this->selectedCall || !$this->selectedEntity) {
            return true;
        }

        // Verificar si hay cambios reales (nuevas selecciones o deselecciones)
        $existing = $this->getExistingAssignments();
        $hasChanges = !empty(array_diff($this->selectedStudents, $existing)) ||
            !empty(array_diff($existing, $this->selectedStudents));

        return !$hasChanges || count($this->selectedStudents) === 0;
    }

    public function redirectAfterSave(): ?string
    {
        return $this->redirectRoute('student-posts.index');
    }

    public function updatedSelectAll($value)
    {
        if ($value) {
            // Calcular cu치ntos estudiantes podemos seleccionar adicionalmente
            $remainingSlots = max(0, $this->maxStudents - count($this->selectedStudents));

            // Seleccionar los primeros estudiantes disponibles hasta completar el cupo
            $studentsToAdd = $this->students
                ->pluck('id')
                ->diff($this->selectedStudents)
                ->take($remainingSlots)
                ->toArray();

            $this->selectedStudents = array_merge($this->selectedStudents, $studentsToAdd);
        } else {
            // Deseleccionar todos los estudiantes que no estaban previamente asignados
            $previouslyAssigned = ApplicationDetail::where('receiving_entity_id', $this->selectedEntity)
                ->when($this->selectedCall, fn($q) => $q->where('application_calls_id', $this->selectedCall))
                ->pluck('user_data_id')
                ->toArray();

            $this->selectedStudents = array_intersect($this->selectedStudents, $previouslyAssigned);
        }

        $this->calculateAvailableSlots();
    }

    public function getSelectedEntityAddressProperty()
    {
        return $this->selectedEntity
            ? optional($this->entities->firstWhere('id', $this->selectedEntity))->address
            : '';
    }

    public function render()
    {
        $this->calculateAvailableSlots();
        return view('livewire.posts-modal');
    }
}

<div x-data="{ show: @entangle('isOpen').defer }" x-show="show" x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-90" x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-150" x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-90" class="fixed inset-0 z-50 flex items-center justify-center bg-black/50"
    style="display: none;">

    <div class="bg-white rounded-xl shadow-xl w-full max-w-4xl p-6 space-y-4 max-h-[90vh] overflow-y-auto">
        <h2 class="text-xl font-semibold">
            {{ $entityID ? 'Editar Asignaciones' : 'Asignar Estudiantes a Entidad' }}
        </h2>

        <form wire:submit.prevent="save">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <x-input-label for="selectedCall" value="Periodo de Postulaci칩n" />
                    <x-select-input id="selectedCall" wire:model="selectedCall" class="w-full">
                        <option value="">Seleccione un periodo</option>
                        @foreach ($calls as $call)
                            <option value="{{ $call->id }}">{{ $call->name }}</option>
                        @endforeach
                    </x-select-input>
                    <x-input-error :messages="$errors->get('selectedCall')" class="mt-2" />
                </div>

                <div>
                    <x-input-label for="selectedEntity" value="Entidad Receptora" />
                    <x-select-input id="selectedEntity" wire:model="selectedEntity" class="w-full">
                        <option value="">Seleccione una entidad</option>
                        @foreach ($entities as $entity)
                            <option value="{{ $entity->id }}">{{ $entity->name }}</option>
                        @endforeach
                    </x-select-input>
                    <x-input-error :messages="$errors->get('selectedEntity')" class="mt-2" />
                </div>
            </div>

            @if ($selectedEntity)
                <div class="mb-4 p-3 bg-blue-50 rounded-md">
                    <p><strong>L칤mite de estudiantes:</strong> {{ $maxStudents }}</p>
                    <p><strong>Cupos disponibles:</strong>
                        <span class="{{ $availableSlots <= 0 ? 'text-red-500' : '' }}">
                            {{ $availableSlots }} de {{ $maxStudents }}
                        </span>
                    </p>
                    <p><strong>Direcci칩n:</strong> {{ $this->selectedEntityAddress }}</p>
                </div>
            @endif

            @if ($students->isNotEmpty())
                <div class="flex justify-between items-center mb-4">
                    <div class="text-sm text-gray-500">
                        Mostrando {{ $students->count() }} estudiantes disponibles
                    </div>
                    <div class="flex items-center space-x-2">
                        <input type="checkbox" id="selectAll" class="checkbox checkbox-sm" wire:model="selectAll"
                            @if ($availableSlots <= 0 && !$selectAll) disabled @endif>
                        <label for="selectAll">Seleccionar todos</label>
                    </div>
                </div>

                <div class="overflow-x-auto mb-4">
                    <table class="min-w-full text-sm border rounded-md">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-4 py-2 text-left"></th>
                                <th class="px-4 py-2 text-left">Nombre</th>
                                @role('admin')
                                    <th class="px-4 py-2 text-left">Carrera</th>
                                @endrole
                                <th class="px-4 py-2 text-left">Semestre</th>
                                <th class="px-4 py-2 text-left">Grado/Paralelo</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($students as $student)
                                <tr class="border-t hover:bg-gray-50">
                                    <td class="px-4 py-2">
                                        <input type="checkbox" class="checkbox checkbox-sm"
                                            wire:model="selectedStudents" value="{{ $student->id }}"
                                            @if (count($selectedStudents) >= $maxStudents && !in_array($student->id, $selectedStudents)) disabled @endif>
                                    </td>
                                    <td class="px-4 py-2">{{ $student->profiles->name }}
                                        {{ $student->profiles->lastnames }}</td>
                                    @role('admin')
                                        <td class="px-4 py-2">{{ $student->careers->name ?? 'N/A' }}</td>
                                    @endrole
                                    <td class="px-4 py-2">{{ $student->semesters->semester ?? 'N/A' }}</td>
                                    <td class="px-4 py-2">{{ $student->grades->grade ?? 'N/A' }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                    <x-input-error :messages="$errors->get('selectedStudents')" class="mt-2" />
                    {{-- @dump($selectedStudents) --}}
                </div>
            @else
                <div class="p-4 text-center text-gray-500 bg-gray-50 rounded-md">
                    @if ($selectedEntity)
                        No hay estudiantes disponibles para asignar a esta entidad
                    @else
                        Seleccione una entidad para ver los estudiantes disponibles
                    @endif
                </div>
            @endif

            <div class="flex justify-end gap-2 pt-4">
                <button wire:click="closeModal" type="button" class="btn btn-outline">
                    Cancelar
                </button>
                <button type="submit" class="btn btn-primary" wire:loading.attr="disabled"
                    @disabled($this->shouldDisableSaveButton)>
                    <span wire:loading.class="hidden">Guardar Asignaciones</span>
                    <span wire:loading>Procesando...</span>
                </button>
            </div>
        </form>
    </div>
</div>
